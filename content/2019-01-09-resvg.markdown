---
layout: post
title: "resvg: worth having in Debian?"
date: 2019-01-09 11:05
comments: true
tags: SVG, Debian
slug: resvg
---

Yesterday I have discovered [resvg](https://github.com/RazrFalcon/resvg), an MPL 2.0-licensed SVG rendering and optimisation library and a tool, written in Rust. It is said to be faster than some SVG renderers while currently slower than librsvg:

![Speed comparison for the Elementary Icon Theme with resvg/cairo being faster than QtSvg but slower than librsvg and resvg/qt being slower than QtSvg](https://github.com/RazrFalcon/resvg/raw/master/.github/perf-elementary.svg?sanitize=true)
![Speed comparison for the Oxygen Icon Theme with resvg/cairo being faster than QtSvg but slower than librsvg and resvg/qt being slower than QtSvg](https://github.com/RazrFalcon/resvg/raw/master/.github/perf-oxygen.svg?sanitize=true)

It aims to support the static subset of SVG [better](https://razrfalcon.github.io/resvg-test-suite/svg-support-table.html) than other libraries:

![SVG test suite results: resvg 249, Inkscape 253, librsvg 222](https://github.com/RazrFalcon/resvg/raw/master/.github/official_chart.svg?sanitize=true)

The author writes:

> One of the major differences from other rendering libraries is that resvg does a lot of preprocessing before rendering. It converts shapes to paths, resolves attributes, removes groups and invisible elements, fixes a lot of issues in malformed SVG files. Then it creates a simple render tree with all elements and attributes resolved. And only then it starts to render. So it's very easy to implement a new rendering backend.

> * librsvg, currently, is heavily tied to the cairo library, unlike resvg
> * librsvg is heavily tied to GNOME which makes it painful to distribute outside the Linux ecosystem
> * librsvg doesn't really preprocess input files, rendering them as is
> * librsvg has a minimal support of the edge-cases, which leads to rendering errors

Iâ€™m thinking of packaging this for Debian, but I would be interested in knowing what others think of this.
